import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# ‚úÖ Donn√©es simul√©es
data = {
    'commandes': 500,
    'commandes_livrees_a_temps': 420,
    'stock_moyen': 120000,  # en ‚Ç¨
    'ventes_net': 600000,   # en ‚Ç¨
    'cout_biens_vendus': 450000,
    'taux_possession': 0.25,
    'commandes_parfaites': 385,
    'cout_total_transport': 75000,  # en ‚Ç¨
    'tonnage_total': 1500,  # en tonnes
    'delais_livraisons_fournisseurs': [True, True, False, True, False, True, True, True, False, True],
}

# ‚úÖ Calcul des KPI
kpis = {}

# 1. Livraison √† l‚Äôheure (Ponctualit√© client)
kpis['Ponctualit√© Client (%)'] = round(data['commandes_livrees_a_temps'] / data['commandes'] * 100, 2)

# 2. Ratio Stock / Ventes (ISR)
kpis['ISR (Stock/Ventes)'] = round(data['stock_moyen'] / data['ventes_net'], 2)

# 3. Co√ªt de possession du stock
kpis['Co√ªt de possession du stock (‚Ç¨)'] = round(data['stock_moyen'] * data['taux_possession'], 2)

# 4. Ponctualit√© fournisseurs
ponctualite_fournisseurs = sum(data['delais_livraisons_fournisseurs']) / len(data['delais_livraisons_fournisseurs']) * 100
kpis['Ponctualit√© Fournisseurs (%)'] = round(ponctualite_fournisseurs, 2)

# 5. DSI ‚Äì Dur√©e moyenne de rotation des stocks
kpis['DSI (jours)'] = round((data['stock_moyen'] / data['cout_biens_vendus']) * 365, 1)

# 6. Co√ªt transport par tonne
kpis['Co√ªt transport/tonne (‚Ç¨)'] = round(data['cout_total_transport'] / data['tonnage_total'], 2)

# 7. Taux de commandes parfaites
kpis['Commandes parfaites (%)'] = round(data['commandes_parfaites'] / data['commandes'] * 100, 2)

# ‚úÖ Affichage des KPI
print("üîç R√©sum√© des KPI logistiques :\n")
for k, v in kpis.items():
    print(f"{k}: {v}")

# ‚úÖ Comparaison avec les seuils standards
seuils = {
    'Ponctualit√© Client (%)': 95,
    'ISR (Stock/Ventes)': 0.2,
    'Ponctualit√© Fournisseurs (%)': 90,
    'DSI (jours)': 60,
    'Co√ªt transport/tonne (‚Ç¨)': 50,
    'Commandes parfaites (%)': 98
}

# ‚úÖ Visualisation radar
import pandas as pd

kpi_names = list(seuils.keys())
kpi_values = [kpis[k] for k in kpi_names]
kpi_seuils = [seuils[k] for k in kpi_names]

df_kpi = pd.DataFrame({
    'KPI': kpi_names,
    'Valeur R√©elle': kpi_values,
    'Seuil Recommand√©': kpi_seuils
})

angles = np.linspace(0, 2 * np.pi, len(kpi_names), endpoint=False).tolist()
values = df_kpi['Valeur R√©elle'].tolist()
seuils_plot = df_kpi['Seuil Recommand√©'].tolist()

# Fermer le cercle
values += values[:1]
seuils_plot += seuils_plot[:1]
angles += angles[:1]

# Radar chart
plt.figure(figsize=(8, 6))
ax = plt.subplot(111, polar=True)
ax.plot(angles, values, 'o-', linewidth=2, label='Valeur R√©elle')
ax.fill(angles, values, alpha=0.25)
ax.plot(angles, seuils_plot, 'o--', color='red', linewidth=2, label='Seuil')
ax.fill(angles, seuils_plot, color='red', alpha=0.1)

ax.set_thetagrids(np.degrees(angles[:-1]), kpi_names)
plt.title("Comparaison KPI vs Seuils", size=15)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# üñºÔ∏è G√©n√©rer un rapport visuel avec matplotlib
fig, ax = plt.subplots(figsize=(10, 8))
ax.axis("off")

reco_lines = [" Axes d'am√©lioration logistique", ""]

if kpis['Ponctualit√© Client (%)'] < seuils['Ponctualit√© Client (%)']:
    reco_lines += [
        "Ponctualit√© client",
        "‚Üí R√©duire les d√©lais d‚Äôexp√©dition",
        "‚Üí Suivi temps r√©el des transporteurs",
        "‚Üí Optimiser les tourn√©es", ""
    ]

if kpis['ISR (Stock/Ventes)'] > seuils['ISR (Stock/Ventes)']:
    reco_lines += [
        "Ratio Stock/Ventes",
        "‚Üí Ajuster le stock √† la demande",
        "‚Üí R√©√©valuer les seuils de r√©approvisionnement", ""
    ]

if kpis['Ponctualit√© Fournisseurs (%)'] < seuils['Ponctualit√© Fournisseurs (%)']:
    reco_lines += [
        " Fiabilit√© fournisseurs",
        "‚Üí Identifier les non-conformit√©s",
        "‚Üí Mettre en place des SLA",
        "‚Üí Diversifier les fournisseurs", ""
    ]

if kpis['DSI (jours)'] > seuils['DSI (jours)']:
    reco_lines += [
        "Rotation des stocks (DSI)",
        "‚Üí Destocker les produits lents",
        "‚Üí Lancer des promotions cibl√©es",
        "‚Üí Am√©liorer la pr√©vision de la demande", ""
    ]

if kpis['Co√ªt transport/tonne (‚Ç¨)'] > seuils['Co√ªt transport/tonne (‚Ç¨)']:
    reco_lines += [
        " Co√ªt de transport √©lev√©",
        "‚Üí Regrouper les exp√©ditions",
        "‚Üí N√©gocier avec les transporteurs",
        "‚Üí Optimiser le chargement", ""
    ]

if kpis['Commandes parfaites (%)'] < seuils['Commandes parfaites (%)']:
    reco_lines += [
        " Commandes parfaites insuffisantes",
        "‚Üí Am√©liorer le contr√¥le qualit√©",
        "‚Üí R√©duire les erreurs de picking",
        "‚Üí Digitaliser le suivi de commande", ""
    ]

# üí¨ Afficher tout le texte dans le graphe
ax.text(0.01, 1.0, "\n".join(reco_lines), fontsize=12, va="top")

plt.tight_layout()
plt.show()
